#include "pch.h"
#include "ProcessUtils.h"
#include "wil/win32_helpers.h"
#include <string>
#include <stdexcept>

namespace utils::process
{

void CreateProcessAndWaitForExit(
    const std::string &applicationName, const std::string &commandLine)
{
    STARTUPINFOA startupInfo = {};
    startupInfo.wShowWindow = SW_HIDE;
    startupInfo.cb = sizeof(startupInfo);

    wil::unique_process_information processInfo;

    std::string processCommandLine("\"" + applicationName + "\" " + commandLine);
    if (!::CreateProcessA(
        NULL,                                           // No module name (use command line)
        const_cast<LPSTR>(processCommandLine.c_str()),  // Command line
        NULL,                                           // Process handle not inheritable
        NULL,                                           // Thread handle not inheritable
        FALSE,                                          // Set handle inheritance to FALSE
        CREATE_NO_WINDOW,                               // No creation flags
        NULL,                                           // Use parent's environment block
        NULL,                                           // Use parent's starting directory
        &startupInfo,                                   // Pointer to STARTUPINFO structure
        &processInfo))                                  // Pointer to PROCESS_INFORMATION structure
    {
        throw std::runtime_error("CreateProcess() failed. Error: " + std::to_string(::GetLastError()));
    }

    ::WaitForSingleObject(processInfo.hProcess, INFINITE);
}

}
