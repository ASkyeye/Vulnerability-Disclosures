// AswChestRpcClient.cpp : Defines the functions for the static library.
//

#include "AswChestRpcClient.h"
#include "AswChest_h.h"
#include "wil/resource.h"
#include "wil/rpc_helpers.h"
#include <string>
#include <stdexcept>


AswChestRpcClient::AswChestRpcClient()
{
    wchar_t protocolSequence[] = L"ncalrpc";
    wchar_t endpoint[] = L"aswChest";
    wchar_t *stringBinding;

    auto rpcStatus = ::RpcStringBindingCompose(
        nullptr,
        reinterpret_cast<RPC_WSTR>(protocolSequence),
        nullptr,
        reinterpret_cast<RPC_WSTR>(endpoint),
        nullptr,
        reinterpret_cast<RPC_WSTR *>(&stringBinding));
    if (rpcStatus != RPC_S_OK)
        throw std::runtime_error("RpcStringBindingCompose failed. Error: " + std::to_string(rpcStatus));

    auto freeStringBinding = wil::scope_exit(
        [stringBinding]() mutable { ::RpcStringFree(reinterpret_cast<RPC_WSTR *>(&stringBinding)); });

    rpcStatus = ::RpcBindingFromStringBinding(
        reinterpret_cast<RPC_WSTR>(stringBinding), &m_interfaceBinding);
    if (rpcStatus != RPC_S_OK)
        throw std::runtime_error("RpcBindingFromStringBinding failed. Error: " + std::to_string(rpcStatus));
}

AswChestRpcClient::~AswChestRpcClient()
{
    try
    {
        auto rpcStatus = ::RpcBindingFree(&m_interfaceBinding);
        if (rpcStatus != RPC_S_OK)
            throw std::runtime_error("RpcBindingFree failed. Error: " + std::to_string(rpcStatus));
    }
    catch (...)
    {
        // ToDo: Log error
    }
}

void AswChestRpcClient::AddFile(
    long *newId, unsigned char *fileContent, long fileLength, wchar_t **propertiesArray, long propertiesCount
)
{
    using unique_chest_context =
        wil::unique_rpc_context_handle<void *, decltype(&AswChestRpcProc1_FreeHandle), AswChestRpcProc1_FreeHandle>;

    unique_chest_context chestContext;
    THROW_IF_FAILED(wil::invoke_rpc_result_nothrow(
        *chestContext.put(), &AswChestRpcProc0_GetHandle, m_interfaceBinding));

    wil::invoke_rpc_nothrow(
        &AswChestRpcProc3_AddFile, chestContext.get(), newId, fileContent, fileLength, reinterpret_cast<Property *>(propertiesArray), propertiesCount);
}
