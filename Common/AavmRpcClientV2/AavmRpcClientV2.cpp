// AavmRpcClientV2.cpp : Defines the functions for the static library.
//

#include "AavmRpcClientV2.h"
#include "Aavm_h.h"
#include "wil/resource.h"
#include "wil/rpc_helpers.h"
#include <string>
#include <stdexcept>

using unique_aavm_context = wil::unique_rpc_context_handle<void *, decltype(&AavmRpcProc1_FreeHandle), AavmRpcProc1_FreeHandle>;

AavmRpcClient::AavmRpcClient()
{
    wchar_t protocolSequence[] = L"ncalrpc";
    wchar_t endpoint[] = L"[aswAavm]";
    wchar_t *stringBinding;

    auto rpcStatus = ::RpcStringBindingCompose(
        nullptr,
        reinterpret_cast<RPC_WSTR>(protocolSequence),
        nullptr,
        reinterpret_cast<RPC_WSTR>(endpoint),
        nullptr,
        reinterpret_cast<RPC_WSTR *>(&stringBinding));
    if (rpcStatus != RPC_S_OK)
        throw std::runtime_error("RpcStringBindingCompose failed. Error: " + std::to_string(rpcStatus));

    auto freeStringBinding = wil::scope_exit(
        [stringBinding] () mutable { ::RpcStringFree(reinterpret_cast<RPC_WSTR *>(&stringBinding)); });

    rpcStatus = ::RpcBindingFromStringBinding(
        reinterpret_cast<RPC_WSTR>(stringBinding), &m_interfaceBinding);
    if (rpcStatus != RPC_S_OK)
        throw std::runtime_error("RpcBindingFromStringBinding failed. Error: " + std::to_string(rpcStatus));
}

AavmRpcClient::~AavmRpcClient()
{
    try
    {
        auto rpcStatus = ::RpcBindingFree(&m_interfaceBinding);
        if (rpcStatus != RPC_S_OK)
            throw std::runtime_error("RpcBindingFree failed. Error: " + std::to_string(rpcStatus));
    }
    catch (...)
    {
        // ToDo: Log error
    }
}

void AavmRpcClient::ResetIniFiles(HRESULT &hr)
{
    unique_aavm_context aavmContext;

    hr = wil::invoke_rpc_result_nothrow(
        static_cast<void *&>(*aavmContext.put()), &AavmRpcProc0_GetHandle, m_interfaceBinding);
    if (FAILED(hr))
        return;

    hr = wil::invoke_rpc_nothrow(
        &AavmRpcProc58_ResetIniFiles, aavmContext.get(), 1, 0);
}

void AavmRpcClient::ResetIniFiles()
{
    auto aavmContext = unique_aavm_context(
        wil::invoke_rpc_result(&AavmRpcProc0_GetHandle, m_interfaceBinding));

    wil::invoke_rpc(&AavmRpcProc58_ResetIniFiles, aavmContext.get(), 1, 0);
}

void AavmRpcClient::RestoreQuarantinedFile(long chestId, unsigned char *idpBlob, long idpBlobSize, HRESULT &hr)
{
    unique_aavm_context aavmContext;

    hr = wil::invoke_rpc_result_nothrow(
        static_cast<void *&>(*aavmContext.put()), &AavmRpcProc0_GetHandle, m_interfaceBinding);
    if (FAILED(hr))
        return;

    hr = wil::invoke_rpc_nothrow(&AavmRpcProc82_RestoreQuarantinedFile,
        aavmContext.get(), chestId, ::GetCurrentProcessId(), 0, nullptr, idpBlob, idpBlobSize, nullptr, '\0');
}

void AavmRpcClient::RestoreQuarantinedFile(long chestId, unsigned char *idpBlob, long idpBlobSize)
{
    auto aavmContext = unique_aavm_context(
        wil::invoke_rpc_result(&AavmRpcProc0_GetHandle, m_interfaceBinding));

    wil::invoke_rpc(&AavmRpcProc82_RestoreQuarantinedFile,
        aavmContext.get(), chestId, ::GetCurrentProcessId(), 0, nullptr, idpBlob, idpBlobSize, nullptr, '\0');
}
